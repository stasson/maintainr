import { ReadStream } from "fs";

/** Declaration file generated by dts-gen */


type JsonValue = string | number | boolean | null | JsonObject | JsonArray 
interface JsonArray extends Array<JsonValue> {}
interface JsonObject {[k:string]: JsonValue}

type Options = Partial<{
  tag: string
  resolved: string | null
  where: string | null
  before: number | string | Date
  ['full-metadata']: boolean
  dirPacker: (dir: string)=> ReadStream
}>

export function clearMemoized(): Promise<void>

export function extract(spec: string, dest: string, opts?: Options): Promise<void>

export function manifest(spec: string, opts?: Options): Promise<JsonObject>

export function packument(spec: string, opts?: Options): Promise<JsonObject>

export function tarball(spec: string, opts?: Options): Promise<Buffer>

export namespace tarball {
  function stream(spec: string, opts?: Options): Promise<ReadStream>

  function toFile(spec: string, dest: string, opts?: Options): Promise<void>
}
